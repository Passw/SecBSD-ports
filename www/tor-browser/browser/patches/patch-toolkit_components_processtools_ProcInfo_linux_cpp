about:processes for OpenBSD

https://bugzilla.mozilla.org/show_bug.cgi?id=1772090

Index: toolkit/components/processtools/ProcInfo_linux.cpp
--- toolkit/components/processtools/ProcInfo_linux.cpp.orig
+++ toolkit/components/processtools/ProcInfo_linux.cpp
@@ -13,6 +13,11 @@
 #include "nsMemoryReporterManager.h"
 #include "nsWhitespaceTokenizer.h"
 
+#ifdef __OpenBSD__
+#include <sys/types.h>
+#include <sys/sysctl.h>
+#include <cerrno>
+#endif
 #include <cstdio>
 #include <cstring>
 #include <unistd.h>
@@ -24,6 +29,95 @@ namespace mozilla {
 
 int GetCycleTimeFrequencyMHz() { return 0; }
 
+#ifdef __OpenBSD__
+nsresult GetCpuTimeSinceProcessStartInMs(uint64_t* aResult) {
+  timespec t;
+  if (clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &t) == 0) {
+    uint64_t cpuTime =
+        uint64_t(t.tv_sec) * 1'000'000'000u + uint64_t(t.tv_nsec);
+    *aResult = cpuTime / PR_NSEC_PER_MSEC;
+    return NS_OK;
+  }
+
+  return NS_ERROR_FAILURE;
+}
+
+nsresult GetGpuTimeSinceProcessStartInMs(uint64_t* aResult) {
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+
+ProcInfoPromise::ResolveOrRejectValue GetProcInfoSync(
+    nsTArray<ProcInfoRequest>&& aRequests) {
+  ProcInfoPromise::ResolveOrRejectValue result;
+
+  HashMap<base::ProcessId, ProcInfo> gathered;
+  if (!gathered.reserve(aRequests.Length())) {
+    result.SetReject(NS_ERROR_OUT_OF_MEMORY);
+    return result;
+  }
+  for (const auto& request : aRequests) {
+    size_t size;
+    int mib[6];
+    mib[0] = CTL_KERN;
+    mib[1] = KERN_PROC;
+    mib[2] = KERN_PROC_PID | KERN_PROC_SHOW_THREADS;
+    mib[3] = request.pid;
+    mib[4] = sizeof(kinfo_proc);
+    mib[5] = 0;
+    if (sysctl(mib, 6, nullptr, &size, nullptr, 0) == -1) {
+      // Can't get info for this process. Skip it.
+      continue;
+    }
+
+    mib[5] = size / sizeof(kinfo_proc);
+    auto procs = MakeUniqueFallible<kinfo_proc[]>(mib[5]);
+    if (!procs) {
+      result.SetReject(NS_ERROR_OUT_OF_MEMORY);
+      return result;
+    }
+    if (sysctl(mib, 6, procs.get(), &size, nullptr, 0) == -1 &&
+        errno != ENOMEM) {
+      continue;
+    }
+
+    ProcInfo info;
+    info.pid = request.pid;
+    info.childId = request.childId;
+    info.type = request.processType;
+    info.origin = request.origin;
+    info.windows = std::move(request.windowInfo);
+
+    bool found = false;
+    for (size_t i = 0; i < size / sizeof(kinfo_proc); i++) {
+      const auto& p = procs[i];
+      if (p.p_tid == -1) {
+        // This is the process.
+        found = true;
+        info.cpuTime = p.p_rtime_sec * 1'000'000'000u +
+            p.p_uutime_usec * 1'000u;
+        info.memory = (p.p_vm_tsize + p.p_vm_dsize + p.p_vm_ssize) *
+            getpagesize();
+      } else {
+        // This is one of its threads.
+        ThreadInfo threadInfo;
+        threadInfo.tid = p.p_tid;
+        threadInfo.cpuTime = p.p_rtime_sec * 1'000'000'000u +
+            p.p_uutime_usec * 1'000u;
+        info.threads.AppendElement(threadInfo);
+      }
+    }
+
+    if (found && !gathered.put(request.pid, std::move(info))) {
+      result.SetReject(NS_ERROR_OUT_OF_MEMORY);
+      return result;
+    }
+  }
+
+  // ... and we're done!
+  result.SetResolve(std::move(gathered));
+  return result;
+}
+#else
 // StatReader can parse and tokenize a POSIX stat file.
 // see http://man7.org/linux/man-pages/man5/proc.5.html
 //
@@ -340,5 +434,6 @@ ProcInfoPromise::ResolveOrRejectValue GetProcInfoSync(
   result.SetResolve(std::move(gathered));
   return result;
 }
+#endif
 
 }  // namespace mozilla
