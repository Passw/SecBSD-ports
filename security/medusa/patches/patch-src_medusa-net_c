Index: src/medusa-net.c
--- src/medusa-net.c.orig
+++ src/medusa-net.c
@@ -49,16 +49,16 @@
 /*
   Original code utilized global variables for SSL socket support.
   Unfortunately, this could potentially be an issue in cases where
-  modules utilize both SSL and non-SSL within a session (e.g. FTPS). 
-  It's possible one thread could connect to a service in the clear 
-  while another requires SSL. The global variable obviously makes this 
+  modules utilize both SSL and non-SSL within a session (e.g. FTPS).
+  It's possible one thread could connect to a service in the clear
+  while another requires SSL. The global variable obviously makes this
   impossible.
 
   Ideally, this data should be unique to thread and tracked there.
   However, I believe implementing this would require rewriting all
   send/receive calls. For now, we are utilizing a hash of socket id
   to SSL information structure for tracking which connections require
-  SSL. 
+  SSL.
 */
 struct SSLSOCKETINFO {
   int id;                    /* key --> socket id */
@@ -69,7 +69,7 @@ struct SSLSOCKETINFO {
   UT_hash_handle hh;         /* required for UThash */
 };
 
-struct SSLSOCKETINFO *psSSLSocketInfo = NULL; 
+struct SSLSOCKETINFO *psSSLSocketInfo = NULL;
 pthread_mutex_t ptmSSLMutex;
 
 #endif
@@ -109,24 +109,24 @@ int medusaConnectInternal(unsigned long nHost, int nPo
   long flag;
   int nOpt;
   unsigned int nSize;
-  fd_set myset; 
+  fd_set myset;
   struct timeval tv;
   int nUseProxy = nProxyStringIP > 0 ? 1 : 0;
 
   s = socket(PF_INET, nProtocol, nType);
-  if (s >= 0) 
+  if (s >= 0)
   {
     /* Handle a source port request from a module */
     if ( nSourcePort != 0 ) {
       int bind_ok=0;
-       
+
       source.sin_family = PF_INET;
       source.sin_port = htons(nSourcePort);
       source.sin_addr.s_addr = INADDR_ANY;
-  
+
       /* We will try to find a free port down to 512 */
       while (!bind_ok && nSourcePort >= 512)
-      {   
+      {
         if (bind(s, (struct sockaddr *)&source, sizeof(source))==-1)
         {
           if (errno == EADDRINUSE)
@@ -162,68 +162,68 @@ int medusaConnectInternal(unsigned long nHost, int nPo
     }
     target.sin_family = AF_INET;
 
-    // Set non-blocking 
-    if((flag = fcntl(s, F_GETFL, NULL)) < 0) 
-    { 
-      writeError(ERR_ERROR, "Error fcntl(..., F_GETFL) (%s)", strerror(errno)); 
-      return -1; 
-    } 
-    flag |= O_NONBLOCK; 
-    if(fcntl(s, F_SETFL, flag) < 0) 
-    { 
-      writeError(ERR_ERROR, "Error fcntl(..., F_SETFL) (%s)", strerror(errno)); 
-      return -1; 
-    } 
- 
-    nFail = 0;    
+    // Set non-blocking
+    if((flag = fcntl(s, F_GETFL, NULL)) < 0)
+    {
+      writeError(ERR_ERROR, "Error fcntl(..., F_GETFL) (%s)", strerror(errno));
+      return -1;
+    }
+    flag |= O_NONBLOCK;
+    if(fcntl(s, F_SETFL, flag) < 0)
+    {
+      writeError(ERR_ERROR, "Error fcntl(..., F_SETFL) (%s)", strerror(errno));
+      return -1;
+    }
+
+    nFail = 0;
     ret = connect(s, (struct sockaddr*)&target, sizeof(struct sockaddr_in));
-    if (errno == EINPROGRESS) 
-    { 
-      do 
-      { 
+    if (errno == EINPROGRESS)
+    {
+      do
+      {
           if (nFail > 0 && nFail <= nRetries)
           {
-            writeError(ERR_ERROR, "Thread %X: Host: %s Cannot connect [unreachable], retrying (%d of %d retries)", (int)pthread_self(), inet_ntop(AF_INET, &target.sin_addr, out, sizeof(out)), nFail, nRetries);
+            writeError(ERR_ERROR, "Thread %lu: Host: %s Cannot connect [unreachable], retrying (%d of %d retries)", (unsigned long)pthread_self(), inet_ntop(AF_INET, &target.sin_addr, out, sizeof(out)), nFail, nRetries);
             sleep(nRetryWait);
           }
           else if (nFail > nRetries)
             return -1;
-            
-          tv.tv_sec = nWaitTime; 
-          tv.tv_usec = 0; 
-          FD_ZERO(&myset); 
-          FD_SET(s, &myset); 
-          ret = select(s + 1, NULL, &myset, NULL, &tv); 
-          if (ret < 0 && errno != EINTR) 
-          { 
-            writeError(ERR_ERROR, "Error connecting to host: %s", strerror(errno)); 
-            return -1; 
-          } 
-          else if (ret > 0) 
-          { 
+
+          tv.tv_sec = nWaitTime;
+          tv.tv_usec = 0;
+          FD_ZERO(&myset);
+          FD_SET(s, &myset);
+          ret = select(s + 1, NULL, &myset, NULL, &tv);
+          if (ret < 0 && errno != EINTR)
+          {
+            writeError(ERR_ERROR, "Error connecting to host: %s", strerror(errno));
+            return -1;
+          }
+          else if (ret > 0)
+          {
             nSize = sizeof(int);
-            if (getsockopt(s, SOL_SOCKET, SO_ERROR, (void*)(&nOpt), &nSize) < 0) 
-            { 
-              writeError(ERR_ERROR, "Error in getsockopt() %s", strerror(errno)); 
+            if (getsockopt(s, SOL_SOCKET, SO_ERROR, (void*)(&nOpt), &nSize) < 0)
+            {
+              writeError(ERR_ERROR, "Error in getsockopt() %s", strerror(errno));
               return -1;
-            } 
-            if (nOpt != 0) 
-            { 
+            }
+            if (nOpt != 0)
+            {
               // Socket is not valid - connection failed
               writeVerbose(VB_GENERAL, "Unable to connect (invalid socket): unreachable destination - %s", inet_ntop(AF_INET, &target.sin_addr, out, sizeof(out)));
-              return -1; 
+              return -1;
             }
-            
+
             // If we get here, the socket should be valid
             ret = 0;
-            break; 
-          } 
-          else 
-          { 
-            nFail++; 
-          } 
-      } while (1); 
-    }       
+            break;
+          }
+          else
+          {
+            nFail++;
+          }
+      } while (1);
+    }
     if (ret != 0 || nFail > nRetries)
     {
       writeVerbose(VB_GENERAL, "Unable to connect: unreachable destination");
@@ -233,17 +233,17 @@ int medusaConnectInternal(unsigned long nHost, int nPo
     }
 
     // Set the socket to be blocking again
-    if((flag = fcntl(s, F_GETFL, NULL)) < 0) 
-    { 
-      writeError(ERR_ERROR, "Error fcntl(..., F_GETFL) (%s)", strerror(errno)); 
-      return -1; 
-    } 
-    flag &= ~O_NONBLOCK; 
-    if(fcntl(s, F_SETFL, flag) < 0) 
-    { 
-      writeError(ERR_ERROR, "Error fcntl(..., F_SETFL) (%s)", strerror(errno)); 
-      return -1; 
-    } 
+    if((flag = fcntl(s, F_GETFL, NULL)) < 0)
+    {
+      writeError(ERR_ERROR, "Error fcntl(..., F_GETFL) (%s)", strerror(errno));
+      return -1;
+    }
+    flag &= ~O_NONBLOCK;
+    if(fcntl(s, F_SETFL, flag) < 0)
+    {
+      writeError(ERR_ERROR, "Error fcntl(..., F_SETFL) (%s)", strerror(errno));
+      return -1;
+    }
     ret = s;
 
     /*
@@ -253,21 +253,21 @@ int medusaConnectInternal(unsigned long nHost, int nPo
     // Windows responds with a MSS value of 536
     // Windows sends a non-fragmented packet of 955 bytes
     // Our buffer of 576 has issues... moving to a buffer of 1500 for now...
-   
+
       int option = 576 + 40;
       int optlen = sizeof(option);
- 
-      // getsockopt call doesn't seem to work... use "ifconfig eth0 mtu 616" 
 
+      // getsockopt call doesn't seem to work... use "ifconfig eth0 mtu 616"
+
       if (setsockopt(s, SOL_IP, IP_MTU, &option, optlen) < 0)
         writeError(ERR_ERROR, "Error setting MTU size.");
-   
-      option = 0; 
+
+      option = 0;
       if (getsockopt(s, SOL_IP, IP_MTU, &option, &optlen) < 0)
         writeError(ERR_ERROR, "Error retrieving MTU size.");
-    
+
       writeError(ERR_DEBUG, "MTU size: %d", option);
-    
+
       #define TCP_MAXSEG  0x02
       if (getsockopt(s, IPPROTO_TCP, TCP_MAXSEG, &option, &optlen) < 0)
         writeError(ERR_ERROR, "Error retrieving TCP_MAXSEG size.");
@@ -327,7 +327,8 @@ RSA *sslTempRSACallback(SSL * ssl __attribute__((unuse
   RSA *rsa = NULL;
 
   if (rsa == NULL)
-    rsa = RSA_generate_key(512, RSA_F4, NULL, NULL);
+    RSA_generate_key_ex(rsa, 512, (BIGNUM*) RSA_F4, NULL);
+
   return rsa;
 }
 
@@ -337,7 +338,7 @@ int medusaConnectSSLInternal(sConnectParams* pParams, 
   struct SSLSOCKETINFO *s;
   SSL *ssl = NULL;
   SSL_CTX *sslContext = NULL;
-  
+
   pthread_mutex_lock(&ptmSSLMutex);
 
   SSL_load_error_strings();
@@ -347,12 +348,12 @@ int medusaConnectSSLInternal(sConnectParams* pParams, 
      the server demands. The module can override this by setting nSSLVersion. */
 
   /* Debian's OpenSSL has SSLv2 support disabled. */
-#ifndef OPENSSL_NO_SSL2
+#if !defined(OPENSSL_NO_SSL2) && (OPENSSL_VERSION_NUMBER < 0x10100005L)
   if (pParams->nSSLVersion == 2)
     sslContext = SSL_CTX_new(SSLv2_client_method());
   else
 #endif
-#ifndef OPENSSL_NO_SSL3
+#if !defined(OPENSSL_NO_SSL3) && (OPENSSL_VERSION_NUMBER < 0x10100005L)
   if (pParams->nSSLVersion == 3)
     sslContext = SSL_CTX_new(SSLv3_client_method());
   else
@@ -378,7 +379,6 @@ int medusaConnectSSLInternal(sConnectParams* pParams, 
 
   // we set the default verifiers and dont care for the results
   SSL_CTX_set_default_verify_paths(sslContext);
-  SSL_CTX_set_tmp_rsa_callback(sslContext, sslTempRSACallback);
   SSL_CTX_set_verify(sslContext, SSL_VERIFY_NONE, NULL);
 
   if ((hSocket < 0) && ((hSocket = medusaConnect(pParams)) < 0))
@@ -409,9 +409,9 @@ int medusaConnectSSLInternal(sConnectParams* pParams, 
   s->nUseSSL = 1;
   s->ssl = ssl;
   s->sslContext = sslContext;
-  
-  HASH_ADD_INT( psSSLSocketInfo, id, s ); 
-  
+
+  HASH_ADD_INT( psSSLSocketInfo, id, s );
+
   pthread_mutex_unlock(&ptmSSLMutex);
 
   return hSocket;
@@ -469,21 +469,21 @@ unsigned char* medusaReceiveDataInternal(int socket, i
 {
   /*
     When receiving UDP packets, we need to be mindful of packets exceeding our default buffer size.
-    Since we configure our UDP socket as SOCK_DGRAM, any packets beyond the buffer size will be 
-    discarded following a recv() call. UDP messages, or datagrams, should have the entire message 
-    within a single packet. The actual maximum size of this packet is unknown, however, due to a 
+    Since we configure our UDP socket as SOCK_DGRAM, any packets beyond the buffer size will be
+    discarded following a recv() call. UDP messages, or datagrams, should have the entire message
+    within a single packet. The actual maximum size of this packet is unknown, however, due to a
     number of variables (see reference below). For our purposes, we are going to use the value
     of 576.
 
     http://www.uic.rsu.ru/doc/inet/tcp_stevens/ip_inter.htm#3_2
 
-    Although it's possible to send a 65535-byte IP datagram, most link layers will fragment this. 
-    Furthermore, a host is not required to receive a datagram larger than 576 bytes. TCP divides 
-    the user's data into pieces, so this limit normally doesn't affect TCP. With UDP we'll 
-    encounter numerous applications in later chapters (RIP, TFTP, BOOTP, the DNS, and SNMP) that 
-    limit themselves to 512 bytes of user data, to stay below this 576-byte limit. Realistically, 
-    however, most implementations today (especially those that support the Network File System, 
-    NFS) allow for just over 8192-byte IP datagrams. 
+    Although it's possible to send a 65535-byte IP datagram, most link layers will fragment this.
+    Furthermore, a host is not required to receive a datagram larger than 576 bytes. TCP divides
+    the user's data into pieces, so this limit normally doesn't affect TCP. With UDP we'll
+    encounter numerous applications in later chapters (RIP, TFTP, BOOTP, the DNS, and SNMP) that
+    limit themselves to 512 bytes of user data, to stay below this 576-byte limit. Realistically,
+    however, most implementations today (especially those that support the Network File System,
+    NFS) allow for just over 8192-byte IP datagrams.
 
     As of 2013/07/25, we are increasing the buffer size from 576 to 1500. The reason for this
     change is to deal with a OWA/EWS servers sending non-fragment packets larger than 576 and
@@ -491,13 +491,13 @@ unsigned char* medusaReceiveDataInternal(int socket, i
     host has failed for an unknown reason.
   */
   const int BUFFER_SIZE = 1500;
-  
+
   unsigned char *szBufReceive, *szBufReceiveTmp;
   int nBufReceive = 0, nBufReceiveTmp = 0, BufReceiveIndex = 0;
   int bSocketStatus = 0;
   int nReceiveDelay1sec = 0, nReceiveDelay1usec = 0;
   int nReceiveDelay2sec = 0, nReceiveDelay2usec = 0;
-  
+
   *nBufferSize = 0;
 
   szBufReceive = malloc(BUFFER_SIZE + 1);
@@ -545,8 +545,8 @@ unsigned char* medusaReceiveDataInternal(int socket, i
       free(szBufReceiveTmp);
       break;
     }
-   
-    if (nBufReceive + nBufReceiveTmp > BUFFER_SIZE) 
+
+    if (nBufReceive + nBufReceiveTmp > BUFFER_SIZE)
     {
       writeError(ERR_DEBUG, "Additional data received. Increasing receive buffer %d bytes to %d.", nBufReceiveTmp, nBufReceive + nBufReceiveTmp + 1);
       szBufReceive = realloc(szBufReceive, nBufReceive + nBufReceiveTmp + 1);
@@ -568,7 +568,7 @@ unsigned char* medusaReceiveDataInternal(int socket, i
         szBufReceive[BufReceiveIndex] = 32;
 
   writeError(ERR_DEBUG, "Formatted data received (size %d): %s", nBufReceive, szBufReceive);
-  
+
   *nBufferSize = nBufReceive;
   return szBufReceive;
 }
@@ -589,21 +589,21 @@ int medusaSendInternal(int socket, unsigned char *buf,
     int nRet;
     //char *bufReceive = NULL;
     //int nReceiveBufferSize = 0;
-    
+
     /* flush any extraneous data remaining on socket */
-    //while (medusaDataReadyTimed(socket, 0, 1) > 0) 
+    //while (medusaDataReadyTimed(socket, 0, 1) > 0)
     //{
     //  bufReceive = medusaReceiveRaw(socket, &nReceiveBufferSize);
     //  writeError(ERR_DEBUG, "Purging extraneous data on socket from previous request (size %d): %s", nReceiveBufferSize, bufReceive);
     //  if (bufReceive == NULL) { break; }
     //}
- 
-    nRet = send(socket, buf, size, options); 
+
+    nRet = send(socket, buf, size, options);
     if (nRet < 0)
     {
-      writeError(ERR_ERROR, "Error in send() %s", strerror(errno)); 
+      writeError(ERR_ERROR, "Error in send() %s", strerror(errno));
     }
-    
+
     return nRet;
 #ifdef HAVE_LIBSSL
   }
@@ -637,7 +637,7 @@ int medusaConnectSSL(sConnectParams* pParams)
 #endif
 }
 
-/* Requires medusaConnect() to already have been called and for the socket to passed as an argument. 
+/* Requires medusaConnect() to already have been called and for the socket to passed as an argument.
    Used for protocols which switch from non-SSL to SSL mid-connection. */
 int medusaConnectSocketSSL(sConnectParams* pParams, int hSocket)
 {
@@ -684,7 +684,7 @@ int medusaDisconnect(int hSocket)
     return -1;
 
   pthread_mutex_lock(&ptmSSLMutex);
-  
+
   /* Remove socket's SSL informational structure (if it exists) */
   HASH_FIND_INT( psSSLSocketInfo, &hSocket, s );
   if (s != NULL)
@@ -745,7 +745,7 @@ int medusaDataReady(int socket)
 int medusaCheckSocket(int socket, int usec)
 {
   writeError(ERR_DEBUG, "Socket Check - wait time: %d", usec);
-  
+
   if (medusaDataReadyTimed(socket, 0, usec) == 0)
     return 1;
   else
@@ -783,8 +783,8 @@ unsigned char* medusaReceiveLineDelay(int socket, int*
 
 
 /*
-  Receive function which uses regular expressions to determine whether we read 
-  all the data we're intending to. The goal is to address the issue of varying 
+  Receive function which uses regular expressions to determine whether we read
+  all the data we're intending to. The goal is to address the issue of varying
   network speeds of servers. We don't want to retrieve only the first few bytes
   of a response and then start responding before the remote end is finished.
 
@@ -800,7 +800,7 @@ int medusaReceiveRegex(int hSocket, unsigned char **sz
   char errmsg[512];
   int nAttempt = 1;
   const int BUFFER_SIZE = 1500;
-    
+
   writeError(ERR_DEBUG, "Regural expession: \"%s\"", regex);
   errcode = regcomp(&preg, regex, REG_EXTENDED|REG_ICASE|REG_NOSUB);
   if (errcode)
@@ -809,7 +809,7 @@ int medusaReceiveRegex(int hSocket, unsigned char **sz
     regerror(errcode, &preg, errmsg, 512);
     writeError(ERR_ERROR, "Regex compilation failed: %s", errmsg);
     return FAILURE;
-  }  
+  }
 
   *szBufReceive = medusaReceiveDataInternal(hSocket, nBufReceive, 0, READ_WAIT_TIME, 0);
   if (*szBufReceive == NULL)
@@ -835,8 +835,8 @@ int medusaReceiveRegex(int hSocket, unsigned char **sz
           free(szBufReceiveTmp);
           break;
         }
- 
-        if (*nBufReceive + nBufReceiveTmp > BUFFER_SIZE) 
+
+        if (*nBufReceive + nBufReceiveTmp > BUFFER_SIZE)
         {
           writeError(ERR_DEBUG, "Additional data received. Increasing receive buffer %d bytes to %d.", nBufReceiveTmp, *nBufReceive + nBufReceiveTmp + 1);
           *szBufReceive = realloc(*szBufReceive, *nBufReceive + nBufReceiveTmp + 1);
