From a6c88034f122bde3dd8eee66afe8c92a1e2d859e Mon Sep 17 00:00:00 2001
From: Rico Tzschichholz <ricotz@ubuntu.com>
Date: Wed, 16 Aug 2023 09:51:28 +0200
Subject: [PATCH] vala: Only transform default initializers of parameters

Index: vala/valamethodcall.vala
--- vala/valamethodcall.vala.orig
+++ vala/valamethodcall.vala
@@ -655,16 +655,26 @@ public class Vala.MethodCall : Expression, CallableExp
 		}
 
 		//Resolve possible generic-type in certain Expressions used as parameter default-value
-		foreach (Expression arg in argument_list) {
-			unowned SizeofExpression? sizeof_expr = arg as SizeofExpression;
-			if (sizeof_expr != null && sizeof_expr.type_reference is GenericType) {
-				var sizeof_type = sizeof_expr.type_reference.get_actual_type (target_object_type, method_type_args, this);
-				replace_expression (arg, new SizeofExpression (sizeof_type, source_reference));
+		arg_it = argument_list.iterator ();
+		foreach (Parameter param in params) {
+			if (param.ellipsis || param.params_array) {
+				break;
 			}
-			unowned TypeofExpression? typeof_expr = arg as TypeofExpression;
-			if (typeof_expr != null && typeof_expr.type_reference is GenericType) {
-				var typeof_type = typeof_expr.type_reference.get_actual_type (target_object_type, method_type_args, this);
-				replace_expression (arg, new TypeofExpression (typeof_type, source_reference));
+			if (arg_it.next ()) {
+				Expression arg = arg_it.get ();
+				if (param.initializer != arg) {
+					continue;
+				}
+				unowned SizeofExpression? sizeof_expr = arg as SizeofExpression;
+				if (sizeof_expr != null && sizeof_expr.type_reference is GenericType) {
+					var sizeof_type = sizeof_expr.type_reference.get_actual_type (target_object_type, method_type_args, this);
+					replace_expression (arg, new SizeofExpression (sizeof_type, source_reference));
+				}
+				unowned TypeofExpression? typeof_expr = arg as TypeofExpression;
+				if (typeof_expr != null && typeof_expr.type_reference is GenericType) {
+					var typeof_type = typeof_expr.type_reference.get_actual_type (target_object_type, method_type_args, this);
+					replace_expression (arg, new TypeofExpression (typeof_type, source_reference));
+				}
 			}
 		}
 
